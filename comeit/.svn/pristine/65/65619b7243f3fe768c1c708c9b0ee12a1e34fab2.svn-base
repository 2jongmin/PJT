package comeit.framework.configure.spring;

import java.util.ArrayList;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.EnableAspectJAutoProxy;
import org.springframework.http.MediaType;
import org.springframework.http.converter.HttpMessageConverter;
import org.springframework.http.converter.StringHttpMessageConverter;
import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;
import org.springframework.scheduling.annotation.EnableAsync;
import org.springframework.transaction.annotation.EnableTransactionManagement;
import org.springframework.web.multipart.commons.CommonsMultipartResolver;
import org.springframework.web.servlet.ViewResolver;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;
import org.springframework.web.servlet.view.InternalResourceViewResolver;
import org.springframework.web.servlet.view.JstlView;
import org.springframework.web.socket.WebSocketHandler;
import org.springframework.web.socket.config.annotation.EnableWebSocket;
import org.springframework.web.socket.config.annotation.WebSocketConfigurer;
import org.springframework.web.socket.config.annotation.WebSocketHandlerRegistry;

import comeit.framework.common.aop.ControllerAspect;

/**
 * Created by linuxp on 2016. 1. 10..
 * Spring MVC 설정 클래스
 * dispatcher-servlet.xml 역할
 */
@Configuration
@EnableWebMvc
@EnableAsync
@EnableWebSocket
@EnableTransactionManagement
@EnableAspectJAutoProxy(proxyTargetClass=true)
//@EnableAspectJAutoProxy
@ComponentScan (
    basePackages = "comeit",
    useDefaultFilters = false,
    includeFilters = {
        @ComponentScan.Filter(org.springframework.stereotype.Controller.class),
        @ComponentScan.Filter(org.springframework.web.bind.annotation.ControllerAdvice.class)
    },
    excludeFilters = {
        @ComponentScan.Filter(org.springframework.stereotype.Service.class),
        @ComponentScan.Filter(comeit.framework.mybatis.Mapper.class)
    }
)
public class MvcConfig extends WebMvcConfigurerAdapter implements WebSocketConfigurer {
  protected final Logger log = LoggerFactory.getLogger(MvcConfig.class);
  
  /**
   * 웹 소켓 핸들러 등록
   * @param registry
   */
  @Override
  public void registerWebSocketHandlers(WebSocketHandlerRegistry registry) {
    // HTML5 기본 웹소켓 uri /test/wctest uri로 연결
    registry.addHandler(webSocketTestHandler(), "/wctest");
    
    // SocketJS 지원 url
    registry.addHandler(webSocketTestHandler(), "/socketjs/wctest");
  }
  
  /**
   * 테스트 웹 소켓 핸들러를 스프링 빈으로 등록
   * @return
   */
  @Bean
  public WebSocketHandler webSocketTestHandler() {
    return new comeit.framework.common.websocket.WebSocketHandler();
  }
  
  /**
   * dispatcher-servlet.xml의 <mvc:default-servlet-handler/>
   * @param configurer
   */
  @Override
  public void configureDefaultServletHandling(org.springframework.web.servlet.config.annotation.DefaultServletHandlerConfigurer configurer) {
    configurer.enable();
  };
  
  /**
   * 메시지 컨버터 설정
   * @param converters
   */
  @Override
  public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {
    converters.add(jsonConverter());
    converters.add(stringConverter());
  }
  
  @Bean
  public ControllerAspect controllerAspect() {
    return new ControllerAspect();
  }
  
  /**
   * JSON 메시지 컨버터
   * application/json
   * @return
   */
  @Bean
  MappingJackson2HttpMessageConverter jsonConverter() {
    MappingJackson2HttpMessageConverter converter = new MappingJackson2HttpMessageConverter();
    List<MediaType> mediaTypes = new ArrayList<MediaType>();
    mediaTypes.add(MediaType.APPLICATION_JSON);
    converter.setSupportedMediaTypes(mediaTypes);
    
    return converter;
  }
  
  /**
   * String 메시지 컨버터
   * text/plain
   * @return
   */
  StringHttpMessageConverter stringConverter() {
    StringHttpMessageConverter converter = new StringHttpMessageConverter();
    List<MediaType> mediaTypes = new ArrayList<MediaType>();
    mediaTypes.add(MediaType.TEXT_PLAIN);
    converter.setSupportedMediaTypes(mediaTypes);
    
    return converter;
  }
  
  /**
   * 인터셉터 추가
   */
  /*
  @Override
  public void addInterceptors(InterceptorRegistry registry) {
    WebContentInterceptor webContentInterceptor = new WebContentInterceptor();
    webContentInterceptor.setCacheSeconds(0);
    registry.addInterceptor(webContentInterceptor);
    
    // RESTFul 헤더 인터셉터
    registry.addInterceptor(new RestHeaderInterceptor());
  }
  */
  
  /**
   * 파입 업로드 리졸버 설정
   * @return
   */
  @Bean
  public CommonsMultipartResolver multipartResolver() {
    CommonsMultipartResolver cmr = new CommonsMultipartResolver();
    cmr.setDefaultEncoding("UTF-8");
    cmr.setMaxUploadSize(10485760);
    return cmr;
  }
  
  /**
   * 파일 다운로드 빈 설정
   * @return
   */
  /*
  @Bean
  public MultiActionController fileDownload() {
    MultiActionController mac = new MultiActionController();
    ParameterMethodNameResolver resolver = new ParameterMethodNameResolver();
    resolver.setParamName("vx");
    resolver.setDefaultMethodName("fileDownload");
    mac.setMethodNameResolver(resolver);
    mac.setDelegate(FileDownloadController.class);
    return mac;
  }
  */
  
  /**
   * Tiles 설정
   * @return
   */
//  @Bean
//  public TilesConfigurer tilesConfigurer() {
//   TilesConfigurer configure = new TilesConfigurer();
//   configure.setDefinitions("classpath:/conf/config/tiles-definitions.xml");;
//   return configure;
//  }
//  
//  @Bean
//  public UrlBasedViewResolver urlBasedViewResolver() {
//   UrlBasedViewResolver resolver = new UrlBasedViewResolver();
//   resolver.setViewClass(TilesView.class);
//   resolver.setOrder(0);
//   return resolver;
//  }
  
  @Bean
  public ViewResolver viewResolver() {
    InternalResourceViewResolver resolver = new InternalResourceViewResolver();
    resolver.setPrefix("/WEB-INF/views/");
    resolver.setSuffix(".jsp");
    resolver.setViewClass(JstlView.class);
    resolver.setOrder(1);
    return resolver;
  }
}
