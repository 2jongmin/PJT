package comeit.comeit.member.service;

import java.io.IOException;
import java.net.URI;
import java.nio.charset.Charset;

import org.apache.commons.lang.StringUtils;
import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.ResponseHandler;
import org.apache.http.client.config.RequestConfig;
import org.apache.http.client.config.RequestConfig.Builder;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.util.UriComponentsBuilder;

import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import comeit.comeit.member.vo.OpenApiUserVO;
import comeit.framework.common.enums.ResultCodeEnum;
import comeit.framework.common.exception.BizException;
import comeit.framework.common.exception.ComeitBadCredentialsException;
import comeit.framework.common.utils.ApplicationProperty;

/**
 * 오픈API용 서비스
 * 카카오/네이버의 회원정보 및 액세스 토큰 유효성을 검증한다.
 * @author linuxp
 *
 */
@Service
public class OpenAPIService {
  protected final Logger log = LoggerFactory.getLogger(OpenAPIService.class);

  @Autowired
  private ApplicationProperty applicationProperty;
  
  /**
   * 카카오용 액세스 토큰 유효성 검사
   * @param accessToken
   * @return
   * @throws Exception
   */
  public OpenApiUserVO verifyKakaoAccessToken(String accessToken) throws ComeitBadCredentialsException, Exception {
    OpenApiUserVO result = new OpenApiUserVO();

    try {
      URI uri = UriComponentsBuilder.fromUriString(applicationProperty.getProperty("api.kakao.url")).path("/v1/user/access_token_info").build().toUri();

      HttpHeaders headers = new HttpHeaders();
      Charset utf8 = Charset.forName("UTF-8");
      MediaType mediaType = new MediaType("text", "html", utf8);
      headers.setContentType(mediaType);
      //headers.set("User-Agent", "mozilla");
      //headers.set("Accept-Language", "ko");
      StringBuffer authorization = new StringBuffer("Bearer ");
      authorization.append(accessToken);
      headers.set("Authorization", authorization.toString());
      // gzip 사용하면 byte[] 로 받아서, 압축을 풀고 decoding 해야 한다.

      RestTemplate restTemplate = new RestTemplate();

      HttpEntity<String> entity = new HttpEntity<String>("parameters", headers);
      ResponseEntity<String> responseEntity = restTemplate.exchange(uri.toURL().toString(), HttpMethod.GET, entity, String.class);

      if(responseEntity.getStatusCode() != HttpStatus.OK) {
        // 유효하지 않은 액세스 토큰
        throw new ComeitBadCredentialsException(ResultCodeEnum.LOGIN_ERR_INVALID_API_ACCESS_TOKEN.getValue(), ResultCodeEnum.LOGIN_ERR_INVALID_API_ACCESS_TOKEN);
      }
      
      String resultJsonStr = responseEntity.getBody();

      log.debug("Verify Kakao Access Token Result : {}", resultJsonStr);
      
      if(StringUtils.isEmpty(resultJsonStr)) {
        // 유효하지 않은 액세스 토큰
        throw new ComeitBadCredentialsException(ResultCodeEnum.LOGIN_ERR_INVALID_API_ACCESS_TOKEN.getValue(), ResultCodeEnum.LOGIN_ERR_INVALID_API_ACCESS_TOKEN);
      }
      
      ObjectMapper mapper = new ObjectMapper();
      JsonFactory factory = mapper.getFactory();
      JsonParser jp = factory.createParser(resultJsonStr);
      JsonNode rootNode = mapper.readTree(jp);
      
      result.setApiUuid(rootNode.path("id").asText());
      result.setStatusCode(HttpStatus.OK);
    } catch(HttpClientErrorException ex) {
      throw new ComeitBadCredentialsException(ResultCodeEnum.LOGIN_ERR_INVALID_API_ACCESS_TOKEN.getValue(), ResultCodeEnum.LOGIN_ERR_INVALID_API_ACCESS_TOKEN);
    }

    return result;
  }
  
  public String verifyFacebookAccessToken(String accessToken, String userId) throws ComeitBadCredentialsException, Exception {
    OpenApiUserVO result = new OpenApiUserVO();
    
    try {
      String appAccessToken = getFacebookAppAccessToken();
      
      if(StringUtils.isEmpty(appAccessToken)) {
        // App Access Token 발급실패
        throw new BizException();
      }
      
      StringBuffer path = new StringBuffer();
      path.append("/debug_token?input_token=").append(accessToken);
      path.append("&").append(appAccessToken);
      
      URI uri = UriComponentsBuilder.fromUriString(applicationProperty.getProperty("api.facebook.url") + path.toString()).build().toUri();

      log.debug("uri : {}", uri);
      
      RestTemplate restTemplate = new RestTemplate();

      HttpEntity<String> entity = new HttpEntity<String>("parameters");
      ResponseEntity<String> responseEntity = restTemplate.exchange(uri.toURL().toString(), HttpMethod.GET, entity, String.class);

      if(responseEntity.getStatusCode() != HttpStatus.OK) {
        // 유효하지 않은 액세스 토큰
        throw new ComeitBadCredentialsException(ResultCodeEnum.LOGIN_ERR_INVALID_API_ACCESS_TOKEN.getValue(), ResultCodeEnum.LOGIN_ERR_INVALID_API_ACCESS_TOKEN);
      }
      
      String resultJsonStr = responseEntity.getBody();

      //log.debug("Verify Facebook Access Token Result : {}", resultJsonStr);
      
      if(StringUtils.isEmpty(resultJsonStr)) {
        // 유효하지 않은 액세스 토큰
        throw new ComeitBadCredentialsException(ResultCodeEnum.LOGIN_ERR_INVALID_API_ACCESS_TOKEN.getValue(), ResultCodeEnum.LOGIN_ERR_INVALID_API_ACCESS_TOKEN);
      }
      
      ObjectMapper mapper = new ObjectMapper();
      JsonFactory factory = mapper.getFactory();
      JsonParser jp = factory.createParser(resultJsonStr);
      JsonNode rootNode = mapper.readTree(jp);
      
      log.debug("Verify Facebook Access Token Result : {}", rootNode);
      
      JsonNode dataNode = rootNode.path("data");
      
      log.debug("user_id : {}", dataNode.path("user_id").asText());
//      result.setApiUuid(rootNode.path("id").asText());
//      result.setStatusCode(HttpStatus.OK);
    } catch(HttpClientErrorException ex) {
      throw new ComeitBadCredentialsException(ResultCodeEnum.LOGIN_ERR_INVALID_API_ACCESS_TOKEN.getValue(), ResultCodeEnum.LOGIN_ERR_INVALID_API_ACCESS_TOKEN);
    }
    
    return "aaaa";
  }
  
  /**
   * 페이스북 앱 액세스 토큰 가져오기
   * @return
   * @throws Exception
   */
  public String getFacebookAppAccessToken() throws Exception {
    String result = null;
    
    try {
      StringBuffer path = new StringBuffer();
      path.append("/oauth/access_token?");
      path.append("&client_id=").append(applicationProperty.getProperty("api.facebook.appId"));
      path.append("&client_secret=").append(applicationProperty.getProperty("api.facebook.secret"));
      path.append("&grant_type=").append("client_credentials");
      
      URI uri = UriComponentsBuilder.fromUriString(applicationProperty.getProperty("api.facebook.url") + path.toString()).build().toUri();

      log.debug("uri : {}", uri);
      
      RestTemplate restTemplate = new RestTemplate();

      HttpEntity<String> entity = new HttpEntity<String>("parameters");
      ResponseEntity<String> responseEntity = restTemplate.exchange(uri.toURL().toString(), HttpMethod.GET, entity, String.class);

      if(responseEntity.getStatusCode() != HttpStatus.OK) {
        // 유효하지 않은 액세스 토큰
        throw new ComeitBadCredentialsException(ResultCodeEnum.LOGIN_ERR_INVALID_API_ACCESS_TOKEN.getValue(), ResultCodeEnum.LOGIN_ERR_INVALID_API_ACCESS_TOKEN);
      }
      
      result = responseEntity.getBody();

      if(StringUtils.isEmpty(result)) {
        // App AccessToken 발급실패
        
      }
      
    } catch(HttpClientErrorException ex) {
      throw new ComeitBadCredentialsException(ResultCodeEnum.LOGIN_ERR_INVALID_API_ACCESS_TOKEN.getValue(), ResultCodeEnum.LOGIN_ERR_INVALID_API_ACCESS_TOKEN);
    }
    
    return result;
  }
  
  /**
   * 페이스북 앱 액세스 토큰 가져오기
   * @return
   * @throws Exception
   */
  public String getFacebookAppAccessTokenForHTTP() throws Exception {
    String responseBody = "";

    try {
      CloseableHttpClient httpclient = HttpClients.createDefault();
      Builder builder = RequestConfig.custom();
      builder.setConnectTimeout(4000);
      builder.setSocketTimeout(4000);
      //builder.setStaleConnectionCheckEnabled(false);
      RequestConfig config = builder.build();

      try {
        StringBuffer url = new StringBuffer();
        url.append(applicationProperty.getProperty("api.facebook.url")).append("/oauth/access_token?");
        url.append("&client_id=").append(applicationProperty.getProperty("api.facebook.appId"));
        url.append("&client_secret=").append(applicationProperty.getProperty("api.facebook.secret"));
        url.append("&grant_type=").append("client_credentials");
        HttpGet httpGet = new HttpGet(url.toString());
        httpGet.setConfig(config);

        log.debug("url : {}", url);
        log.debug("Executing request {}", httpGet.getRequestLine());

        ResponseHandler<String> responseHandler = new ResponseHandler<String>() {

          @Override
          public String handleResponse(HttpResponse response) throws ClientProtocolException, IOException {

            int status = response.getStatusLine().getStatusCode();
            if(status >= 200 && status < 300) {
              org.apache.http.HttpEntity entity = response.getEntity();
              String responseStr = "";
              
              if(entity != null) {
                responseStr = EntityUtils.toString(entity);
              }
              
              log.info("responseStr : {} ", responseStr);
              
              return responseStr;
            } else {
              throw new ClientProtocolException("Unexpected response status: " + status);
            }
          }
        };
        
        responseBody = httpclient.execute(httpGet, responseHandler);
        log.info("responseBody : {} ", responseBody);
      } catch(Exception ex) {
        log.error("", ex);
      } finally {
        httpclient.close();
      }
      
    } catch(Exception ex) {
      log.error("", ex);
    }
    
    return responseBody;
  }
}
