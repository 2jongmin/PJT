package comeit.comeit.member.service;

import java.net.URI;
import java.nio.charset.Charset;

import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.util.UriComponentsBuilder;

import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import comeit.comeit.member.vo.OpenApiUserVO;
import comeit.framework.common.enums.ResultCodeEnum;
import comeit.framework.common.exception.ComeitBadCredentialsException;
import comeit.framework.common.utils.ApplicationProperty;

/**
 * 오픈API용 서비스
 * 카카오/네이버의 회원정보 및 액세스 토큰 유효성을 검증한다.
 * @author linuxp
 *
 */
@Service
public class OpenAPIService {
  protected final Logger log = LoggerFactory.getLogger(OpenAPIService.class);

  @Autowired
  private ApplicationProperty applicationProperty;
  
  /**
   * 카카오용 액세스 토큰 유효성 검사
   * @param accessToken
   * @return
   * @throws Exception
   */
  public OpenApiUserVO verifyKakaoAccessToken(String accessToken) throws ComeitBadCredentialsException, Exception {
    OpenApiUserVO result = new OpenApiUserVO();

    try {
      URI uri = UriComponentsBuilder.fromUriString(applicationProperty.getProperty("api.kakao.url")).path("/v1/user/access_token_info").build().toUri();

      HttpHeaders headers = new HttpHeaders();
      Charset utf8 = Charset.forName("UTF-8");
      MediaType mediaType = new MediaType("text", "html", utf8);
      headers.setContentType(mediaType);
      //headers.set("User-Agent", "mozilla");
      //headers.set("Accept-Language", "ko");
      StringBuffer authorization = new StringBuffer("Bearer ");
      authorization.append(accessToken);
      headers.set("Authorization", authorization.toString());
      // gzip 사용하면 byte[] 로 받아서, 압축을 풀고 decoding 해야 한다.

      RestTemplate restTemplate = new RestTemplate();

      HttpEntity<String> entity = new HttpEntity<String>("parameters", headers);
      ResponseEntity<String> responseEntity = restTemplate.exchange(uri.toURL().toString(), HttpMethod.GET, entity, String.class);

      if(responseEntity.getStatusCode() != HttpStatus.OK) {
        // 유효하지 않은 액세스 토큰
        throw new ComeitBadCredentialsException(ResultCodeEnum.LOGIN_ERR_INVALID_API_ACCESS_TOKEN.getValue(), ResultCodeEnum.LOGIN_ERR_INVALID_API_ACCESS_TOKEN);
      }
      
      String resultJsonStr = responseEntity.getBody();

      log.debug("Verify Kakao Access Token Result : {}", resultJsonStr);
      
      if(StringUtils.isEmpty(resultJsonStr)) {
        // 유효하지 않은 액세스 토큰
        throw new ComeitBadCredentialsException(ResultCodeEnum.LOGIN_ERR_INVALID_API_ACCESS_TOKEN.getValue(), ResultCodeEnum.LOGIN_ERR_INVALID_API_ACCESS_TOKEN);
      }
      
      ObjectMapper mapper = new ObjectMapper();
      JsonFactory factory = mapper.getFactory();
      JsonParser jp = factory.createParser(resultJsonStr);
      JsonNode rootNode = mapper.readTree(jp);
      
      result.setApiUuid(rootNode.path("id").asText());
      result.setStatusCode(HttpStatus.OK);
    } catch(HttpClientErrorException ex) {
      throw new ComeitBadCredentialsException(ResultCodeEnum.LOGIN_ERR_INVALID_API_ACCESS_TOKEN.getValue(), ResultCodeEnum.LOGIN_ERR_INVALID_API_ACCESS_TOKEN);
    }

    return result;
  }
}
